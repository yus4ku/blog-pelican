<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>いままでのこと</title><link href="http://blog.tekito.org/" rel="alternate"></link><link href="http://blog.tekito.org/feeds/all.atom.xml" rel="self"></link><id>http://blog.tekito.org/</id><updated>2013-12-03T23:30:00+09:00</updated><entry><title>シグナルをブロックすると fork() 後の子プロセスもブロックされた状態で生成される</title><link href="http://blog.tekito.org/2013/12/03/signal-state-will-be-inherited-by-child-process/" rel="alternate"></link><updated>2013-12-03T23:30:00+09:00</updated><author><name>Yusaku</name></author><id>tag:blog.tekito.org,2013-12-03:2013/12/03/signal-state-will-be-inherited-by-child-process/</id><summary type="html">&lt;p&gt;シグナルをブロックした状態で fork() すると、子プロセスもシグナルをブロックした状態で生成されます。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;#include &amp;lt;unistd.h&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include &amp;lt;csignal&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;sigset_t&lt;/span&gt; &lt;span class="n"&gt;blockmask&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;sigemptyset&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;blockmask&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;sigaddset&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;blockmask&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;SIGTERM&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;sigprocmask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SIG_BLOCK&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;blockmask&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="kt"&gt;pid_t&lt;/span&gt; &lt;span class="n"&gt;pid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fork&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pid&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;perror&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;fork&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;EXIT_FAILURE&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pid&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="cm"&gt;/* child */&lt;/span&gt;
        &lt;span class="kt"&gt;sigset_t&lt;/span&gt; &lt;span class="n"&gt;checkmask&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;sigprocmask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;checkmask&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sigismember&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;checkmask&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;SIGTERM&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;SIGTERM is blocked.&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="cm"&gt;/* parent */&lt;/span&gt;
        &lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;出力結果:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;g++ block_sigterm.cpp -o block_sigterm
&lt;span class="nv"&gt;$ &lt;/span&gt;./block_sigterm
SIGTERM is blocked.
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;fork() したあとに exec() 系の関数を呼び出したりすると、ブロックされた状態で処理が継続するようなので思わぬ結果になります。&lt;/p&gt;
&lt;p&gt;fork() 前に pending 状態のシグナルは子プロセスには引き継がれません。&lt;/p&gt;
</summary><category term="C/C++"></category></entry><entry><title>MXE + Qt を使って Linux で Windows GUI アプリをクロスビルドする</title><link href="http://blog.tekito.org/2013/10/18/cross-building-on-linux-for-windows-using-mxe-and-qt/" rel="alternate"></link><updated>2013-10-18T00:00:00+09:00</updated><author><name>Yusaku</name></author><id>tag:blog.tekito.org,2013-10-18:2013/10/18/cross-building-on-linux-for-windows-using-mxe-and-qt/</id><summary type="html">&lt;a class="reference external image-reference" href="http://blog.tekito.org/static/data/2013/10/18/sample.jpg"&gt;&lt;img alt="Hello, Windows!" src="http://blog.tekito.org/static/data/2013/10/18/sample.jpg" style="width: 400px;" /&gt;&lt;/a&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2&gt;環境&lt;/h2&gt;
&lt;p&gt;Debian GNU/Linux jessie amd-64 (Linux 3.10.11)&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="debian"&gt;
&lt;h2&gt;依存パッケージのインストール (Debian)&lt;/h2&gt;
&lt;p&gt;まずは &lt;a class="reference external" href="http://mxe.cc/#requirements-debian"&gt;MXE のドキュメント&lt;/a&gt; に従って、必要なパッケージをインストールします。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;$ apt-get install autoconf automake bash bison bzip2 \
                  cmake flex gettext git g++ intltool \
                  libffi-dev libtool libltdl-dev libssl-dev \
                  libxml-parser-perl make openssl patch perl \
                  pkg-config scons sed unzip wget xz-utils
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="mxe-windows-qt"&gt;
&lt;h2&gt;MXE で Windows 向けの Qt ビルド環境を作成する&lt;/h2&gt;
&lt;p&gt;MXE は Debian のパッケージリポジトリにはありません。&lt;/p&gt;
&lt;p&gt;ソースコードが Github にありますので git clone して make します。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;$ git clone https://github.com/mxe/mxe.git
$ cd mxe &amp;amp;&amp;amp; make qt5
(make qt すると Qt4 用の環境ができてしまうので make qt5 しました。)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;ビルドにはとても時間がかかります。僕の環境では 1 時間くらいかかりました。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2&gt;クロスビルドする&lt;/h2&gt;
&lt;p&gt;mxe ディレクトリ以下の実行ファイルやライブラリを使ってビルドします。&lt;/p&gt;
&lt;p&gt;手順はパスを通して qmake -&amp;gt; make でできます。ビルドするときに qmake -project は必要ありませんでした。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;$ export PATH=&amp;quot;/path/to/mxe/usr/bin/:${PATH}&amp;quot;
$ cd /path/to/your/qt-project/
$ /path/to/mxe/usr/i686-pc-mingw32/qt5/bin/qmake &amp;amp;&amp;amp; make

(Qt4 をビルドした場合 qmake のパスが異なります)
$ /path/to/mxe/usr/i686-pc-mingw32/qt/bin/qmake &amp;amp;&amp;amp; make
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;ビルドに成功すると release/ 以下に .exe ファイルが生成されます。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;$ ls release/*.exe
release/sample.exe
$ file release/sample.exe
release/sample.exe: PE32 executable (GUI) Intel 80386 (stripped to external PDB), for MS Windows
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h2&gt;サンプル&lt;/h2&gt;
&lt;p&gt;クロスビルドを試すためのサンプルコードを Github に置きました。ウィンドウを表示するだけの簡単なものです。必要であればお使いください。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;$ git clone https://github.com/yus4ku/qt-mxe-sample.git
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id4"&gt;
&lt;h2&gt;所感&lt;/h2&gt;
&lt;p&gt;試しに Qt5 で WebKit を使ったアプリを作ってみましたが、MXE 側のライブラリが不足していてビルドできませんでした。make qt すると Qt4 の環境が作成されるあたり、まだ Qt5 は非推奨なのかもしれません。&lt;/p&gt;
&lt;p&gt;Qt Creator でも同等のことができそう、且つ Qt 的には王道っぽいので、そっちも近日中に試してみようと思います。&lt;/p&gt;
&lt;/div&gt;
</summary><category term="Qt"></category><category term="MXE"></category><category term="Debian"></category></entry><entry><title>Pelican へ移行</title><link href="http://blog.tekito.org/2013/10/14/blogging-with-pelican/" rel="alternate"></link><updated>2013-10-14T15:24:00+09:00</updated><author><name>Yusaku</name></author><id>tag:blog.tekito.org,2013-10-14:2013/10/14/blogging-with-pelican/</id><summary type="html">&lt;p&gt;Blog を Wordpress から &lt;a class="reference external" href="http://getpelican.com/"&gt;Pelican&lt;/a&gt; へ移行しました。&lt;/p&gt;
</summary></entry><entry><title>Linux 3.x の仮想マシンから VMware Fusion の共有フォルダが見えない</title><link href="http://blog.tekito.org/2013/09/28/linux-3-x-%E3%81%AE%E4%BB%AE%E6%83%B3%E3%83%9E%E3%82%B7%E3%83%B3%E3%81%8B%E3%82%89-vmware-fusion-%E3%81%AE%E5%85%B1%E6%9C%89%E3%83%95%E3%82%A9%E3%83%AB%E3%83%80%E3%81%8C%E8%A6%8B%E3%81%88%E3%81%AA/" rel="alternate"></link><updated>2013-09-28T01:57:00+09:00</updated><author><name>Yusaku</name></author><id>tag:blog.tekito.org,2013-09-28:2013/09/28/linux-3-x-の仮想マシンから-vmware-fusion-の共有フォルダが見えな/</id><summary type="html">&lt;p&gt;VMware Fusion 上の Linux 仮想マシンから Mac の共有フォルダが見えなくなることが、たびたび (Linux カーネルをアップデートするたび？) あります。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;$ ls /mnt/hgfs/
(見えない...。)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;どうも &lt;em&gt;vmhgfs&lt;/em&gt; (VMware Host-Guest File System) というカーネルモジュールがロードされていないことが原因らしい。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;$ lsmod | grep vmhgfs
(ロードされてない...。)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;いままでこうなったときは VMware Tools を再インストールして修復していました。しかし、VMware Tools は Linux 3.x に対応していないのか、モジュールのビルドに失敗するなど、色々とおかしくなっており、今回は VMware Tools を再インストールしても問題は解消せず。仕方なく手で直しました。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;とりえあず共有フォルダが使えるようになるところまでです。この記事は参考程度に、修復の実施は自己責任でお願いします。&lt;/strong&gt;&lt;/p&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2&gt;環境&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;VMware Fusion 5.03&lt;/li&gt;
&lt;li&gt;ホスト: OS X 10.8.5 (Mountain Lion)&lt;/li&gt;
&lt;li&gt;ゲスト: Linux 3.10.11 (Debian GNU/Linux jessie amd-64)&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2&gt;そもそも&lt;/h2&gt;
&lt;p&gt;試していませんが &lt;em&gt;open-vm-tools&lt;/em&gt; を使うとすぐに解消できるかもしれません。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h2&gt;はじめに&lt;/h2&gt;
&lt;p&gt;まずは VMware Tools を再インストールしましょう。それで直れば解決です。&lt;/p&gt;
&lt;p&gt;ぼくは VMware Tools 9.2.3 を使いました。&lt;/p&gt;
&lt;p&gt;VMware Fusion のメニューから [仮想マシン] -&amp;gt; [VMware Tools の再インストール] で Linux 側の /dev/cdrom に CD-ROM が入るので、それを適当にマウント、中にある tarball を展開、vmware-install.pl を実行すると再インストールできます。&lt;/p&gt;
&lt;p&gt;再インストールしても修復できませんでしたので、手で直しました。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="initscript"&gt;
&lt;h2&gt;まず initscript の動作がおかしい&lt;/h2&gt;
&lt;p&gt;Debian 特有の問題かもしれませんが、vmware-tools のサービスを立ち上げると以下のような出力があります。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;# /etc/init.d/vmware-tools start
   Checking acpi hot plug                                              done
Starting VMware Tools services in the virtual machine:
   Switching to guest configuration:                                   done
/etc/init.d/vmware-tools: 1090: local: &amp;#39;: bad variable name
/etc/init.d/vmware-tools: 1090: local: &amp;#39;: bad variable name
   Blocking file system:                                              failed
/etc/init.d/vmware-tools: 1187: local: &amp;#39;: bad variable name
   Guest operating system daemon:                                      done
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;原因は initscript 内の get_version_integer() 関数にあります。この関数で Linux カーネルのバージョンを取得するとき、uname -r した結果を使いますが、2.6.34 という風な 2 つ以上のピリオドで区切られた出力を期待しているため、動かないようです。実際に uname -r してみると、こんな感じ。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;$ uname -r
3.10-3-amd64
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;ぼくは区切り文字に - (ハイフン) を追加して適当に直しました。実際は Linux 3.10.11 を使っていますが、この修正方法だと 3.10.3 と誤認識されます。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="gd"&gt;--- /etc/init.d/vmware-tools.orig&lt;/span&gt;
&lt;span class="gi"&gt;+++ /etc/init.d/vmware-tools&lt;/span&gt;
&lt;span class="gu"&gt;@@ -847,7 +847,7 @@&lt;/span&gt;

   # There is no double quote around the back-quoted expression on purpose
   # There is no double quote around $version_uts on purpose
&lt;span class="gd"&gt;-  set `IFS=&amp;#39;.&amp;#39;; echo $version_uts`&lt;/span&gt;
&lt;span class="gi"&gt;+  set `IFS=&amp;#39;.-&amp;#39;; echo $version_uts`&lt;/span&gt;
   v1=&amp;quot;$1&amp;quot;
   v2=&amp;quot;$2&amp;quot;
   v3=&amp;quot;$3&amp;quot;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;ちゃんとやるのであれば、uname の代わりに LINUX_VERSION_CODE から取得するのが正しそうです。(コマンドでサクッと取得できる方法があるとよいのですが、わからなかったです。)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include &amp;lt;linux/version.h&amp;gt;&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;LINUX_VERSION_CODE&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="mh"&gt;0xFF0000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
              &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;.&amp;quot;&lt;/span&gt;
              &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;LINUX_VERSION_CODE&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="mh"&gt;0x00FF00&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
              &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;.&amp;quot;&lt;/span&gt;
              &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;LINUX_VERSION_CODE&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="mh"&gt;0x0000FF&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
              &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;修正すると、initscript の問題は解消されました。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="vmhgfs"&gt;
&lt;h2&gt;vmhgfs モジュールをビルドする&lt;/h2&gt;
&lt;p&gt;VMware Tools の tarball の中にソースコードがあります。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;$ tar xzf VMwareTools-9.2.3-1031360.tar.gz
$ tar xf vmware-tools-distrib/lib/modules/source/vmhgfs.tar
$ cd vmhgfs-only
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;make すると以下のような出力があり、失敗します。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;$ make
Using 2.6.x kernel build system.
make -C /lib/modules/3.10-3-amd64/build/include/.. SUBDIRS=$PWD SRCROOT=$PWD/. \
          MODULEBUILDDIR= modules
make[1]: ディレクトリ `/usr/src/linux-headers-3.10-3-amd64&amp;#39; に入ります
  CC [M]  /home/yu/work/vmware/vmhgfs-only/backdoor.o
  CC [M]  /home/yu/work/vmware/vmhgfs-only/backdoorGcc64.o
  CC [M]  /home/yu/work/vmware/vmhgfs-only/bdhandler.o
  CC [M]  /home/yu/work/vmware/vmhgfs-only/cpName.o
  CC [M]  /home/yu/work/vmware/vmhgfs-only/cpNameLinux.o
  CC [M]  /home/yu/work/vmware/vmhgfs-only/cpNameLite.o
  CC [M]  /home/yu/work/vmware/vmhgfs-only/dentry.o
  CC [M]  /home/yu/work/vmware/vmhgfs-only/dir.o
  CC [M]  /home/yu/work/vmware/vmhgfs-only/file.o
/home/yu/work/vmware/vmhgfs-only/file.c: In function ‘HgfsAioRead’:
/home/yu/work/vmware/vmhgfs-only/file.c:754:32: error: dereferencing pointer to incomplete type
/home/yu/work/vmware/vmhgfs-only/file.c: In function ‘HgfsAioWrite’:
/home/yu/work/vmware/vmhgfs-only/file.c:803:32: error: dereferencing pointer to incomplete type
make[4]: *** [/home/yu/work/vmware/vmhgfs-only/file.o] エラー 1
make[3]: *** [_module_/home/yu/work/vmware/vmhgfs-only] エラー 2
make[2]: *** [sub-make] エラー 2
make[1]: *** [all] エラー 2
make[1]: ディレクトリ `/usr/src/linux-headers-3.10-3-amd64&amp;#39; から出ます
make: *** [vmhgfs.ko] エラー 2
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;初っ端に &lt;em&gt;Using 2.6.x kernel build system.&lt;/em&gt; と出力されているあたりから、3.x に対応していないことが伺えます。&lt;/p&gt;
&lt;p&gt;結局ぼくの環境では vmhgfs モジュールをビルドして動かすまでに &lt;em&gt;file.c&lt;/em&gt;, &lt;em&gt;inode.c 周り&lt;/em&gt;, &lt;em&gt;vmci.c 周り&lt;/em&gt; を修正する必要がありました。&lt;/p&gt;
&lt;ol class="arabic"&gt;
&lt;li&gt;&lt;p class="first"&gt;file.c の修正&lt;/p&gt;
&lt;p&gt;make すると以下のようなエラーが発生しました。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;/home/yu/work/vmware/vmhgfs-only/file.c: In function ‘HgfsAioRead’:
/home/yu/work/vmware/vmhgfs-only/file.c:754:32: error: dereferencing pointer to incomplete type
/home/yu/work/vmware/vmhgfs-only/file.c: In function ‘HgfsAioWrite’:
/home/yu/work/vmware/vmhgfs-only/file.c:803:32: error: dereferencing pointer to incomplete type
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;これは kiocb 構造体の宣言が見つからないことが原因のようです。宣言は linux/aio.h にありますので、それをインクルードすると解消されました。&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://blog.tekito.org/static/data/2013/09/28/vmware-tools-9.2.3-file.patch"&gt;vmware-tools-9.2.3-file.patch&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="gd"&gt;--- a/file.c.orig&lt;/span&gt;
&lt;span class="gi"&gt;+++ b/file.c&lt;/span&gt;
&lt;span class="gu"&gt;@@ -25,6 +25,7 @@&lt;/span&gt;
 /* Must come before any kernel header file. */
 #include &amp;quot;driver-config.h&amp;quot;

&lt;span class="gi"&gt;+#include &amp;lt;linux/aio.h&amp;gt;&lt;/span&gt;
 #include &amp;lt;linux/errno.h&amp;gt;
 #include &amp;lt;linux/module.h&amp;gt;
 #include &amp;lt;linux/signal.h&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;inode.c 周りの修正&lt;/p&gt;
&lt;p&gt;make すると以下のようなエラーが発生しました。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;/home/yu/work/vmware/vmhgfs-only/inode.c: In function ‘HgfsTruncatePages’:
/home/yu/work/vmware/vmhgfs-only/inode.c:888:4: error: implicit declaration of function ‘vmtruncate’ [-Werror=implicit-function-declaration]
/home/yu/work/vmware/vmhgfs-only/inode.c: In function ‘HgfsPermission’:
/home/yu/work/vmware/vmhgfs-only/inode.c:1821:64: error: macro &amp;quot;hlist_for_each_entry&amp;quot; passed 4 arguments, but takes just 3
/home/yu/work/vmware/vmhgfs-only/inode.c:1821:7: error: ‘hlist_for_each_entry’ undeclared (first use in this function)
/home/yu/work/vmware/vmhgfs-only/inode.c:1821:7: note: each undeclared identifier is reported only once for each function it appears in
/home/yu/work/vmware/vmhgfs-only/inode.c:1821:66: error: expected ‘;’ before ‘{’ token
/home/yu/work/vmware/vmhgfs-only/inode.c:1815:11: warning: unused variable ‘dcount’ [-Wunused-variable]
/home/yu/work/vmware/vmhgfs-only/inode.c:1814:26: warning: unused variable ‘p’ [-Wunused-variable]
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;エラーの発生原因は 2 つあります。&lt;/p&gt;
&lt;p&gt;ひとつは Linux 3.9 から hlist_for_each_entry マクロのインターフェースが変わったこと、もうひとつは Linux 3.8 から vmtruncate() 関数が廃止されたことです。&lt;/p&gt;
&lt;p&gt;hlist_for_each_entry マクロはいまのインターフェースを参考に使い方を変更し、vmtruncate() 関数は元の実装を参考にマクロ定義しました。inode_operations 構造体が truncate を持たなくなったようなので、その辺りも考慮します。&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://lxr.free-electrons.com/source/include/linux/list.h?v=3.9#L674"&gt;Linux 3.9 の hlist_for_each_entry マクロ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://lxr.free-electrons.com/source/mm/truncate.c?v=3.7#L579"&gt;Linux 3.7 の vmtruncate() 関数&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a class="reference external" href="http://blog.tekito.org/static/data/2013/09/28/vmware-tools-9.2.3-inode.patch"&gt;vmware-tools-9.2.3-inode.patch&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="gd"&gt;--- a/inode.c.orig&lt;/span&gt;
&lt;span class="gi"&gt;+++ b/inode.c&lt;/span&gt;
&lt;span class="gu"&gt;@@ -1811,14 +1811,13 @@&lt;/span&gt;
     */
    if (mask &amp;amp; MAY_ACCESS) { /* For sys_access. */
       struct dentry *dentry;
&lt;span class="gd"&gt;-      struct hlist_node *p;&lt;/span&gt;
       int dcount = 0;

       if (mask &amp;amp; MAY_NOT_BLOCK)
          return -ECHILD;

       /* Find a dentry with valid d_count. Refer bug 587879. */
&lt;span class="gd"&gt;-      hlist_for_each_entry(dentry, p, &amp;amp;inode-&amp;gt;i_dentry, d_alias) {&lt;/span&gt;
&lt;span class="gi"&gt;+      hlist_for_each_entry(dentry, &amp;amp;inode-&amp;gt;i_dentry, d_alias) {&lt;/span&gt;
          dcount = dentry-&amp;gt;d_count;
          if (dcount) {
             LOG(4, (&amp;quot;Found %s %d \n&amp;quot;, dentry-&amp;gt;d_name.name, dcount));
&lt;span class="gd"&gt;--- a/shared/compat_mm.h.orig&lt;/span&gt;
&lt;span class="gi"&gt;+++ b/shared/compat_mm.h&lt;/span&gt;
&lt;span class="gu"&gt;@@ -90,9 +90,9 @@&lt;/span&gt;
 #endif

 /*
&lt;span class="gd"&gt;- * In 2.4.10, vmtruncate was changed from returning void to returning int.&lt;/span&gt;
&lt;span class="gi"&gt;+ * In 3.8.0, vmtruncate was changed from returning void to returning int.&lt;/span&gt;
  */
&lt;span class="gd"&gt;-#if LINUX_VERSION_CODE &amp;lt; KERNEL_VERSION(2, 4, 10)&lt;/span&gt;
&lt;span class="gi"&gt;+#if LINUX_VERSION_CODE &amp;lt; KERNEL_VERSION(3, 8, 0)&lt;/span&gt;
 #define compat_vmtruncate(inode, size)                                        \
 ({                                                                            \
    int result = 0;                                                            \
&lt;span class="gu"&gt;@@ -100,5 +100,12 @@&lt;/span&gt;
    result;                                                                    \
 })
 #else
&lt;span class="gd"&gt;-#define compat_vmtruncate(inode, size) vmtruncate(inode, size)&lt;/span&gt;
&lt;span class="gi"&gt;+#define compat_vmtruncate(inode, size)                                        \&lt;/span&gt;
&lt;span class="gi"&gt;+({                                                                            \&lt;/span&gt;
&lt;span class="gi"&gt;+   int result = inode_newsize_ok(inode, size);                                \&lt;/span&gt;
&lt;span class="gi"&gt;+   if (!result) {                                                             \&lt;/span&gt;
&lt;span class="gi"&gt;+     truncate_setsize(inode, size);                                           \&lt;/span&gt;
&lt;span class="gi"&gt;+   }                                                                          \&lt;/span&gt;
&lt;span class="gi"&gt;+   result;                                                                    \&lt;/span&gt;
&lt;span class="gi"&gt;+})&lt;/span&gt;
 #endif
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;vmci.c 周りを修正する&lt;/p&gt;
&lt;p&gt;file.c と inode.c 周りを修正することでひとまずビルドは通るようになりますが、いざ動かしてみるとシンボルが見つからない旨のエラーが発生してしまいました。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;$ sudo insmod vmhgfs.ko
Error: could not insert module vmhgfs.ko: Unknown symbol in module
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;dmesg すると以下のようなエラーが出力されていました。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;$ dmesg | tail
[42830.843944] vmhgfs: Unknown symbol VMCIDatagram_Send (err 0)
[42830.844015] vmhgfs: Unknown symbol VMCIDatagram_DestroyHnd (err 0)
[42830.844024] vmhgfs: Unknown symbol VMCIDatagram_CreateHnd (err 0)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;いつからかは調べていませんが、どうも VMCI の関数名が変わったようです。ぼくは open-vm-tools を参考に直してしまいました。(最初から open-vm-tools を使えばよかったのかもしれない...。)&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://blog.tekito.org/static/data/2013/09/28/vmware-tools-9.2.3-vmci.patch"&gt;vmware-tools-9.2.3-vmci.patch&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;(diff は長いので割愛。)&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class="section" id="id4"&gt;
&lt;h2&gt;やっと&lt;/h2&gt;
&lt;p&gt;これでようやく共有フォルダが見えるようになりました。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;$ sudo insmod vmhgfs.ko
$ lsmod | grep vmhgfs
vmhgfs                 52573  0
vmw_vmci               48221  1 vmhgfs
$ sudo mount -t vmhgfs .host:/ /mnt/hgfs/
$ ls /mnt/hgfs/
shared
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
</summary><category term="Debian"></category></entry><entry><title>acpid を使ってサスペンド</title><link href="http://blog.tekito.org/2011/08/20/acpid-%E3%82%92%E4%BD%BF%E3%81%A3%E3%81%A6%E3%82%B5%E3%82%B9%E3%83%9A%E3%83%B3%E3%83%89/" rel="alternate"></link><updated>2011-08-20T22:58:00+09:00</updated><author><name>Yusaku</name></author><id>tag:blog.tekito.org,2011-08-20:2011/08/20/acpid-を使ってサスペンド/</id><summary type="html">&lt;p&gt;ノート PC のモニタ開閉時に acpid を使ってサスペンド/復帰する設定を行いました。&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;ThinkPad X60&lt;/li&gt;
&lt;li&gt;Debian GNU/Linux wheezy&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2&gt;はじめに&lt;/h2&gt;
&lt;p&gt;acpid では ACPI イベントを捕捉して、それに応じたアクションを実行できます。&lt;/p&gt;
&lt;p&gt;シンプルな仕組みで、設定も簡単。動作は自由に定義できるので便利です。&lt;/p&gt;
&lt;p&gt;acpid については以下のサイトに詳しいです。&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://wiki.archlinux.org/index.php/Acpid"&gt;Acpid - ArchWiki&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://nekolinux.blogspot.com/2009/10/acpi.html"&gt;りぬーめも Arch Linux on S101: acpiの仕組みとか&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2&gt;イベントの確認&lt;/h2&gt;
&lt;p&gt;イベントは &lt;em&gt;acpi_listen&lt;/em&gt; コマンドで確認できます。&lt;/p&gt;
&lt;p&gt;acpi_listen コマンドを実行してノート PC のモニタをパタパタさせてみたところ、lid イベントが発生していることが確認できました。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;$ acpi_listen
button/lid LID close
video/switchmode VMOD 00000080 00000000
processor LNXCPU:00 00000081 00000000
button/lid LID open
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h2&gt;アクションの定義&lt;/h2&gt;
&lt;p&gt;イベントに対するアクションは &lt;em&gt;/etc/acpi/events/&lt;/em&gt; 以下で定義します。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;$ ls /etc/acpi/events/
ac                    lenovo-undock          thinkpad-volume-up
asus-brightness-down  lidbtn                 tosh-battery
asus-brightness-up    panasonic-lockbtn      tosh-hibernate
...
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;定義は非常にシンプルです。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;$ cat /etc/acpi/events/sleepbtn
event=button[ /]sleep
action=/etc/acpi/sleep.sh
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;em&gt;event&lt;/em&gt; には捕捉したいイベントを識別する文字列を指定。正規表現も使えるようです。&lt;em&gt;action&lt;/em&gt; にはイベントが発生した際に実行するコマンドを指定。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id4"&gt;
&lt;h2&gt;設定してみる&lt;/h2&gt;
&lt;p&gt;ノート PC のモニタを閉じたときにサスペンドさせる設定を追加してみます。&lt;/p&gt;
&lt;p&gt;イベントは acpi_listen コマンドで確認したところ、モニタを閉じたときに button/lid LID close が発生しているので、それを捕捉します。&lt;/p&gt;
&lt;p&gt;アクションは自分でスクリプトを用意することもできますが、/etc/acpi/ に様々なスクリプトが用意されていたので、今回はこれを使いました。&lt;/p&gt;
&lt;p&gt;設定が終わったら acpid を再起動します。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;$ sudo nano -wk /etc/acpi/events/thinkpad-suspend
event=button[ /]lid LID close
action=/etc/acpi/sleep.sh
$ sudo /etc/init.d/acpid restart
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;これで設定完了。&lt;/p&gt;
&lt;p&gt;ノート PC のモニタを閉じるとちゃんとサスペンドされました。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id5"&gt;
&lt;h2&gt;画面がロックされない&lt;/h2&gt;
&lt;p&gt;サスペンドはできたものの、なぜか画面のロックがされず、なんだか気持ちが悪い状態。&lt;/p&gt;
&lt;p&gt;アクションとして指定した /etc/acpi/sleep.sh を見てみると、xscreensaver の起動を確認し、起動されている場合には xscreensaver-command -lock を実行するようになっていました。サスペンド自体は pm-utils の pm-suspend で実現されています。&lt;/p&gt;
&lt;p&gt;なので xscreensaver を立ち上げておけばオッケー。&lt;/p&gt;
&lt;/div&gt;
</summary><category term="Debian"></category></entry><entry><title>Guacamoleでウェブブラウザからデスクトップ環境を使ってみた</title><link href="http://blog.tekito.org/2011/01/22/guacamole%E3%81%A7%E3%82%A6%E3%82%A7%E3%83%96%E3%83%96%E3%83%A9%E3%82%A6%E3%82%B6%E3%81%8B%E3%82%89%E3%83%87%E3%82%B9%E3%82%AF%E3%83%88%E3%83%83%E3%83%97%E7%92%B0%E5%A2%83%E3%82%92%E4%BD%BF%E3%81%A3/" rel="alternate"></link><updated>2011-01-22T04:26:00+09:00</updated><author><name>Yusaku</name></author><id>tag:blog.tekito.org,2011-01-22:2011/01/22/guacamoleでウェブブラウザからデスクトップ環境を使っ/</id><summary type="html">&lt;p&gt;&lt;a class="reference external" href="http://guacamole.sourceforge.net/"&gt;Guacamole&lt;/a&gt; はHTML5とAjaxで実現されたVNCクライアントです。&lt;/p&gt;
&lt;p&gt;ウェブブラウザさえあれば、どこからでもアクセスできるし便利そうなので試してみました。&lt;/p&gt;
&lt;a class="reference external image-reference" href="http://blog.tekito.org/static/data/2011/01/22/guacamole.jpg"&gt;&lt;img alt="Guacamole" src="http://blog.tekito.org/static/data/2011/01/22/guacamole.jpg" style="width: 500px;" /&gt;&lt;/a&gt;
&lt;p&gt;(Guacamoleを使ってノートPCからデスクトップPCにつないでみた様子。Chromeの中でChromeを立ち上げてしまうセンスの無さ...。)&lt;/p&gt;
&lt;p&gt;実際にGuacamoleを使ってグリグリ動かしている動画が &lt;a class="reference external" href="http://guacamole.sourceforge.net/"&gt;公式サイト&lt;/a&gt; にもあるので、そちらも参照のこと。&lt;/p&gt;
&lt;p&gt;Guacamoleは日本語だと「ガカモレ」とか「ワカモレ」と発音するようです。&lt;/p&gt;
&lt;p&gt;基本的に &lt;a class="reference external" href="http://guacamole.sourceforge.net/"&gt;公式サイト&lt;/a&gt; に載ってるインストール手順通りでハマるところはありませんでしたが、ググっても日本語記事が少ないようなのでメモ。&lt;/p&gt;
&lt;div class="section" id="id3"&gt;
&lt;h2&gt;はじめに&lt;/h2&gt;
&lt;p&gt;Guacamoleを利用するためには &lt;em&gt;vncserver&lt;/em&gt;, &lt;em&gt;apache&lt;/em&gt;, &lt;em&gt;tomcat&lt;/em&gt; のほか &lt;em&gt;デスクトップ環境&lt;/em&gt; が必要です。デスクトップ環境の構築方法については触れないので、その辺りが分からない方はググってください。&lt;/p&gt;
&lt;p&gt;また、この記事はとりあえず実験的に動かすことを目的にしているので、継続して利用するのであれば設定を見直す必要があります。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id4"&gt;
&lt;h2&gt;インストール手順&lt;/h2&gt;
&lt;p&gt;まずは必要なパッケージをインストールする。(debian squeezeの場合)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;$ sudo apt-get install vnc4server apache2 tomcat6
&lt;/pre&gt;&lt;/div&gt;
&lt;ol class="arabic"&gt;
&lt;li&gt;&lt;p class="first"&gt;Apache Tomcat&lt;/p&gt;
&lt;p&gt;Apacheとtomcatはインストール直後に既に実行されていたが、一応確認。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;$ /etc/init.d/apache2 status
Apache2 is running (pid 1250).
$ /etc/init.d/tomcat6 status
Tomcat servlet engine is running with pid 2601.
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;netstatすると8080番でjava(tomcat)がLISTENしているので、アクセスしてみる。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;$ curl http://localhost:8080/
&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;ISO-8859-1&amp;quot;?&amp;gt;
&amp;lt;!DOCTYPE html PUBLIC &amp;quot;-//W3C//DTD XHTML 1.0 Strict//EN&amp;quot;
   &amp;quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd&amp;quot;&amp;gt;
&amp;lt;html xmlns=&amp;quot;http://www.w3.org/1999/xhtml&amp;quot; xml:lang=&amp;quot;en&amp;quot; lang=&amp;quot;en&amp;quot;&amp;gt;
&amp;lt;head&amp;gt;
    &amp;lt;title&amp;gt;Apache Tomcat&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;

&amp;lt;body&amp;gt;
&amp;lt;h1&amp;gt;It works !&amp;lt;/h1&amp;gt;
...
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;ぶじに実行できている。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;VNCサーバ&lt;/p&gt;
&lt;p&gt;VNCサーバを起動する。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;$ vncserver
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;初回起動時にはパスワードを問われるので、適当に設定。このパスワードはGuacamoleの設定でも使用します。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;You will require a password to access your desktops.

Password: [password]
Verify: [password]
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;vncserverは起動時のオプションで解像度や色数も変えられます。使いづらかったらその辺りをいじってみましょう。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Guacamole&lt;/p&gt;
&lt;p&gt;ここまできたら、いよいよGuacamoleのダウンロードと設定です。ダウンロードは &lt;a class="reference external" href="http://sourceforge.net/projects/guacamole/files/"&gt;このへん&lt;/a&gt; からお好きなものを。&lt;/p&gt;
&lt;p&gt;ぼくは guacamole-0.3.0rc1.tar.gz(最新版:2011/1/21時点) をつかいました。&lt;/p&gt;
&lt;p&gt;ダウンロードしたら解凍して中身を見てみる。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;$ tar xf guacamole-0.3.0rc1.tar.gz
$ ls guacamole-0.3.0rc1
LICENSE.txt  guacamole-src.tar  guacamole-users.xml  guacamole.war  guacamole.xml
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;この中で使うのは &lt;em&gt;guacamole-users.xml&lt;/em&gt;, &lt;em&gt;guacamole.war&lt;/em&gt;, &lt;em&gt;guacamole.xml&lt;/em&gt; の3ファイルです。&lt;/p&gt;
&lt;p&gt;3.1. guacamole.war&lt;/p&gt;
&lt;p&gt;まずは &lt;em&gt;guacamole.war&lt;/em&gt; を任意の場所に設置します。&lt;/p&gt;
&lt;p&gt;設置場所のパスは &lt;em&gt;guacamole.xml&lt;/em&gt; で指定することになりますが、ここでは &lt;em&gt;guacamole.xml&lt;/em&gt; の初期設定で指定されている /var/lib/guacamole/guacamole.war に置くことにします。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;$ sudo mkdir -p /var/lib/guacamole
$ sudo cp guacamole.war /var/lib/guacamole/
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;3.2 guacamole-users.xml&lt;/p&gt;
&lt;p&gt;つぎに &lt;em&gt;guacamole-users.xml&lt;/em&gt; を /var/lib/tomcat6/conf/ にコピーして設定を編集します。&lt;/p&gt;
&lt;p&gt;このファイルにはBASIC認証でのアクセス時に使用するユーザーとパスワードの設定を行います。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;$ sudo cp guacamole-users.xml /var/lib/tomcat6/conf/
$ sudo nano -wk /var/lib/tomcat6/conf/guacamole-users.xml
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;5行目の username=&amp;quot;&amp;quot;, password=&amp;quot;&amp;quot; を適当に設定しましょう。&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4
5
6&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;&amp;lt;?xml version=&amp;#39;1.0&amp;#39; encoding=&amp;#39;utf-8&amp;#39;?&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;tomcat-users&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;role&lt;/span&gt; &lt;span class="na"&gt;rolename=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;guacamole&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;user&lt;/span&gt; &lt;span class="na"&gt;username=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;guacamole&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;password=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;changeme&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;roles=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;guacamole&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/tomcat-users&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;3.3 guacamole.xml&lt;/p&gt;
&lt;p&gt;さいごに &lt;em&gt;guacamole.xml&lt;/em&gt; をTomcatの ./conf/Catalina/HOSTNAME/ 以下に設置します。&lt;/p&gt;
&lt;p&gt;HOSTNAME は実行するホストに応じて決める。ぼくはとりあえず動作確認のため localhost に置きました。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;$ sudo cp guacamole.xml /var/lib/tomcat6/conf/Catalina/localhost/
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;em&gt;guacamole.xml&lt;/em&gt; の編集の前に、VNCサーバが待ち受けてるポート番号を調べます。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;$ sudo netstat -anp --tcp
稼働中のインターネット接続 (サーバと確立)
Proto 受信-Q 送信-Q 内部アドレス            外部アドレス            状態        PID/Program name
tcp        0      0 0.0.0.0:6001            0.0.0.0:*               LISTEN      4752/Xvnc4
tcp        0      0 0.0.0.0:22              0.0.0.0:*               LISTEN      1405/sshd
tcp        0      0 127.0.0.1:25            0.0.0.0:*               LISTEN      1619/exim4
tcp6       0      0 :::8080                 :::*                    LISTEN      4825/java
tcp6       0      0 :::80                   :::*                    LISTEN      1250/apache2
tcp6       0      0 :::22                   :::*                    LISTEN      1405/sshd
tcp6       0      0 ::1:25                  :::*                    LISTEN      1619/exim4
tcp6       0      0 127.0.0.1:8005          :::*                    LISTEN      4825/java
tcp6       0      0 :::5901                 :::*                    LISTEN      4752/Xvnc4
...
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Xvnc4ってのがVNCサーバ。&lt;/p&gt;
&lt;p&gt;tcpとtcp6の両方で待ち受けていることがわかりますが、javaの待ち受けがtcp6の8080番なので、VNCサーバもそれに合わせてtcp6のほう(5901番)を使います。&lt;/p&gt;
&lt;p&gt;VNCサーバのポート番号はわかったので &lt;em&gt;guacamole.xml&lt;/em&gt; を編集しましょう。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;$ sudo nano -wk /var/lib/tomcat6/conf/Catalina/localhost/guacamole.xml
&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt;

&amp;lt;!--
    Guacamole - Pure JavaScript/HTML VNC Client
    Copyright (C) 2010  Michael Jumper

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU Affero General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Affero General Public License for more details.

    You should have received a copy of the GNU Affero General Public License
    along with this program.  If not, see &amp;lt;http://www.gnu.org/licenses/&amp;gt;.
--&amp;gt;

&amp;lt;Context antiJARLocking=&amp;quot;true&amp;quot; path=&amp;quot;/guacamole&amp;quot; docBase=&amp;quot;/var/lib/guacamole/guacamole.war&amp;quot;&amp;gt;

    &amp;lt;!-- Change the lines below to match your VNC server --&amp;gt;
    &amp;lt;Parameter name=&amp;quot;host&amp;quot; value=&amp;quot;localhost&amp;quot;/&amp;gt;
    &amp;lt;Parameter name=&amp;quot;port&amp;quot; value=&amp;quot;5900&amp;quot;/&amp;gt;

    &amp;lt;!-- Password (VNC Authentication)

         Uncomment and change the line below if your VNC server is
         password protected. --&amp;gt;

    &amp;lt;!--
    &amp;lt;Parameter name=&amp;quot;password&amp;quot; value=&amp;quot;PASSWORD&amp;quot;/&amp;gt;
    --&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;name=&amp;quot;host&amp;quot;, name=&amp;quot;port&amp;quot;, name=&amp;quot;password&amp;quot; の value を編集。&lt;/p&gt;
&lt;p&gt;passwordにはvncserver起動時に設定したパスワードを設定する。パスワードの設定は &lt;em&gt;コメントアウトされている&lt;/em&gt; ので解除する必要があります。そこだけ注意。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class="section" id="id6"&gt;
&lt;h2&gt;これで設定は完了！&lt;/h2&gt;
&lt;p&gt;あとはTomcatを再起動してから &lt;a class="reference external" href="http://localhost:8080/guacamole"&gt;http://localhost:8080/guacamole&lt;/a&gt; へアクセスすればおっけー。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;$ sudo /etc/init.d/tomcat6 restart
Stopping Tomcat servlet engine: tomcat6.
Starting Tomcat servlet engine: tomcat6.
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id7"&gt;
&lt;h2&gt;使ってみた感想&lt;/h2&gt;
&lt;p&gt;レスポンスもなかなかいいし、設定も簡単なのでとっつきやすいです。あと、ブラウザにデスクトップが表示されるのはちょっと感動する。&lt;/p&gt;
&lt;p&gt;操作性はデスクトップ環境にもよると思いますが、タイル型のWMとの相性はかなり悪め。この辺りは設定次第なのかもしれません。&lt;/p&gt;
&lt;p&gt;重たい処理もやってみようと思い、ためしに Neverwinter Nights(PCゲーム) を動かしてみた。PCが非力なのもあってか、カックカクでゲームってレベルじゃない。色もおかしいし。&lt;/p&gt;
&lt;a class="reference external image-reference" href="http://blog.tekito.org/static/data/2011/01/22/nwn.jpg"&gt;&lt;img alt="Neverwinter Nights" src="http://blog.tekito.org/static/data/2011/01/22/nwn.jpg" style="width: 500px;" /&gt;&lt;/a&gt;
&lt;p&gt;でも、ブラウザ内で3DのPCゲームが動くってすごいね。&lt;/p&gt;
&lt;p&gt;Wineも使ってあれこれやってみたけど、そっちはうまくいかなかったのでまた今度挑戦しよう。&lt;/p&gt;
&lt;p&gt;それにしてもGuacamoleって覚えづらい名前だ...。ブラウザから見に行く時に「&lt;a class="reference external" href="http://localhost:8080/gua"&gt;http://localhost:8080/gua&lt;/a&gt;... gua... えーと、なんだっけ？」ってことが何度もあった。&lt;/p&gt;
&lt;/div&gt;
</summary><category term="Debian"></category></entry><entry><title>bash のビルトインコマンド “local” について</title><link href="http://blog.tekito.org/2010/11/23/bash-%E3%81%AE%E3%83%93%E3%83%AB%E3%83%88%E3%82%A4%E3%83%B3%E3%82%B3%E3%83%9E%E3%83%B3%E3%83%89-local-%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6/" rel="alternate"></link><updated>2010-11-23T19:52:00+09:00</updated><author><name>Yusaku</name></author><id>tag:blog.tekito.org,2010-11-23:2010/11/23/bash-のビルトインコマンド-local-について/</id><summary type="html">&lt;p&gt;実験のまとめ。&lt;/p&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2&gt;前置き&lt;/h2&gt;
&lt;p&gt;bash では特に指定しない限り、 &lt;em&gt;変数は常にグローバル&lt;/em&gt; な変数として扱われてしまいます。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;#!/bin/bash&lt;/span&gt;

&lt;span class="k"&gt;function &lt;/span&gt;foo&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="nv"&gt;hoge&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;foo&amp;quot;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

foo
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$hoge&lt;/span&gt; &lt;span class="c"&gt;# foo と出力される&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;変数をつくるたびに、グローバルな領域を汚染していくのはよろしくないので、ここではグローバル化の対策として bash のビルトインコマンド &lt;em&gt;local&lt;/em&gt; を使用します。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;#!/bin/bash&lt;/span&gt;

&lt;span class="k"&gt;function &lt;/span&gt;foo&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="nb"&gt;local &lt;/span&gt;&lt;span class="nv"&gt;hoge&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;foo&amp;quot;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

foo
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$hoge&lt;/span&gt; &lt;span class="c"&gt;# 空出力&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;このように、明示的に local の変数だよーって宣言してあげると、関数をでたときには忘れる。なんだか逆な気がしますが...。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2&gt;本題&lt;/h2&gt;
&lt;p&gt;bash では &lt;em&gt;for ループに使用する変数&lt;/em&gt; や、&lt;em&gt;read で受け取る変数&lt;/em&gt; も他の変数と同様に、特に指定しない限りグローバル変数になります。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;#!/bin/bash&lt;/span&gt;

&lt;span class="k"&gt;function &lt;/span&gt;foo&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;for &lt;/span&gt;hoge in &lt;span class="sb"&gt;`&lt;/span&gt;&lt;span class="nb"&gt;echo &lt;/span&gt;one two three&lt;span class="sb"&gt;`&lt;/span&gt;; &lt;span class="k"&gt;do&lt;/span&gt;
        :
    &lt;span class="k"&gt;done&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;function &lt;/span&gt;bar&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="nb"&gt;read &lt;/span&gt;piyo
&lt;span class="o"&gt;}&lt;/span&gt;

foo
bar
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$hoge&lt;/span&gt; &lt;span class="c"&gt;# three と出力される&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$piyo&lt;/span&gt; &lt;span class="c"&gt;# 入力された文字列が出力される&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;対策として local を使用したいところですが、 &lt;em&gt;for や read の変数名の前に local を置くと&lt;/em&gt; 残念ながら &lt;em&gt;構文エラー&lt;/em&gt; になってしまいます。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;#!/bin/bash&lt;/span&gt;

&lt;span class="k"&gt;function &lt;/span&gt;foo&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;for &lt;/span&gt;&lt;span class="nb"&gt;local &lt;/span&gt;hoge in &lt;span class="sb"&gt;`&lt;/span&gt;&lt;span class="nb"&gt;echo &lt;/span&gt;one two three&lt;span class="sb"&gt;`&lt;/span&gt;; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="c"&gt;# syntax error&lt;/span&gt;
        :
    &lt;span class="k"&gt;done&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;function &lt;/span&gt;bar&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="nb"&gt;read local &lt;/span&gt;piyo &lt;span class="c"&gt;# syntax error&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;どうしたものかと頭を抱えるところです...。&lt;/p&gt;
&lt;p&gt;でも実はそのあたりもちゃんと対策されていて、一度 local コマンドに名前を渡すと、 &lt;em&gt;同じスコープ内ではその変数名はずっとローカル&lt;/em&gt; として扱う特性があります。具体的には以下のように。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;#!/bin/bash&lt;/span&gt;

&lt;span class="k"&gt;function &lt;/span&gt;foo&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="nb"&gt;local &lt;/span&gt;hoge &lt;span class="c"&gt;# 一度 local と宣言したら&lt;/span&gt;
    &lt;span class="nv"&gt;hoge&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;foo&amp;quot;&lt;/span&gt; &lt;span class="c"&gt;# global っぽく代入しても local として扱われる&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

foo
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$hoge&lt;/span&gt; &lt;span class="c"&gt;# 空出力&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;すこし誤解を招きそうなこの特性ですが、これを利用して先程の for や read の問題も解決できます。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;#!/bin/bash&lt;/span&gt;

&lt;span class="k"&gt;function &lt;/span&gt;foo&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="nb"&gt;local &lt;/span&gt;hoge
    &lt;span class="k"&gt;for &lt;/span&gt;hoge in &lt;span class="sb"&gt;`&lt;/span&gt;&lt;span class="nb"&gt;echo &lt;/span&gt;one two three&lt;span class="sb"&gt;`&lt;/span&gt;; &lt;span class="k"&gt;do&lt;/span&gt;
        :
    &lt;span class="k"&gt;done&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;function &lt;/span&gt;bar&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="nb"&gt;local &lt;/span&gt;piyo
    &lt;span class="nb"&gt;read &lt;/span&gt;bar
&lt;span class="o"&gt;}&lt;/span&gt;

foo
bar
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$hoge&lt;/span&gt; &lt;span class="c"&gt;# 空出力&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$piyo&lt;/span&gt; &lt;span class="c"&gt;# 空出力&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h2&gt;余談&lt;/h2&gt;
&lt;p&gt;実験中に発見したのですが、zsh だと以下は構文エラーになりません。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;#!/bin/zsh&lt;/span&gt;

&lt;span class="k"&gt;function &lt;/span&gt;foo&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;for &lt;/span&gt;&lt;span class="nb"&gt;local &lt;/span&gt;hoge in &lt;span class="sb"&gt;`&lt;/span&gt;&lt;span class="nb"&gt;echo &lt;/span&gt;one two three&lt;span class="sb"&gt;`&lt;/span&gt;; &lt;span class="k"&gt;do&lt;/span&gt;
        :
    &lt;span class="k"&gt;done&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;function &lt;/span&gt;bar&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="nb"&gt;read local &lt;/span&gt;piyo
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;bash も将来的にはできるようになるかもしれませんね。&lt;/p&gt;
&lt;/div&gt;
</summary><category term="Bash"></category></entry><entry><title>nouveauでデュアルモニタの設定をしてみた</title><link href="http://blog.tekito.org/2010/11/20/nouveau%E3%81%A7%E3%83%87%E3%83%A5%E3%82%A2%E3%83%AB%E3%83%A2%E3%83%8B%E3%82%BF%E3%81%AE%E8%A8%AD%E5%AE%9A%E3%82%92%E3%81%97%E3%81%A6%E3%81%BF%E3%81%9F/" rel="alternate"></link><updated>2010-11-20T18:27:00+09:00</updated><author><name>Yusaku</name></author><id>tag:blog.tekito.org,2010-11-20:2010/11/20/nouveauでデュアルモニタの設定をしてみた/</id><summary type="html">&lt;p&gt;nouveauはNVIDIAのVGA用の非公式ディスプレイドライバで、2.6.33からはカーネルにマージされているらしい。&lt;/p&gt;
&lt;p&gt;デュアルモニタの設定でやることは &lt;em&gt;nouveauの導入&lt;/em&gt; と &lt;em&gt;xorg.confの設定&lt;/em&gt; だけ。&lt;/p&gt;
&lt;p&gt;検索してもあまり日本語のサイトがヒットしなかったので、メモついでに記事にしときます。&lt;/p&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2&gt;nouveauの導入&lt;/h2&gt;
&lt;p&gt;お使いのディストリビューションに依る部分です。&lt;/p&gt;
&lt;p&gt;fedora は 13 以降、debian は testing 以降であればメインリポジトリにあるようです。&lt;/p&gt;
&lt;p&gt;ちなみに debian testing の netinst したら最初から適用されていました。&lt;/p&gt;
&lt;p&gt;検索してもなければ、仕方がないのでソースからコンパイルしましょう。&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://nouveau.freedesktop.org/wiki/Source"&gt;nouveau Wiki - Source&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ただ、ソースからコンパイルするくらいなら、NVIDIA公式のドライバを使ってもいいかも...。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="xorg-conf"&gt;
&lt;h2&gt;xorg.confの設定&lt;/h2&gt;
&lt;p&gt;1枚のグラフィックカードでデュアル出力した場合の設定例です。&lt;/p&gt;
&lt;p&gt;以下、xorg.confの設定全文。&lt;/p&gt;
&lt;p&gt;/etc/X11/xorg.conf:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;Section &amp;quot;ServerLayout&amp;quot;
    identifier &amp;quot;Layout&amp;quot;
    screen     0 &amp;quot;screen0&amp;quot; 0 0
Endsection

Section &amp;quot;Monitor&amp;quot;
    Identifier &amp;quot;Monitor0&amp;quot;
    Option     &amp;quot;PreferredMode&amp;quot; &amp;quot;1920x1080&amp;quot;
    Option     &amp;quot;Primary&amp;quot; &amp;quot;True&amp;quot;
EndSection

Section &amp;quot;Monitor&amp;quot;
    Identifier &amp;quot;Monitor1&amp;quot;
    Option     &amp;quot;PreferredMode&amp;quot; &amp;quot;1920x1080&amp;quot;
    Option     &amp;quot;RightOf&amp;quot; &amp;quot;Monitor0&amp;quot;
    Option     &amp;quot;Primary&amp;quot; &amp;quot;False&amp;quot;
EndSection

Section &amp;quot;Device&amp;quot;
    Identifier &amp;quot;Device0&amp;quot;
    Driver     &amp;quot;nouveau&amp;quot;
    Option     &amp;quot;monitor-DVI-D-1&amp;quot; &amp;quot;Monitor0&amp;quot;
    Option     &amp;quot;monitor-VGA-1&amp;quot;   &amp;quot;Monitor1&amp;quot;
EndSection

Section &amp;quot;Screen&amp;quot;
    Identifier   &amp;quot;screen0&amp;quot;
    Device       &amp;quot;Device0&amp;quot;
    Monitor      &amp;quot;Monitor0&amp;quot;
    DefaultDepth 24

    SubSection &amp;quot;Display&amp;quot;
        Depth   24
        Modes   &amp;quot;1920x1080&amp;quot;
    EndSubSection
EndSection
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;解像度はMonitor0、Monitor1共に1920x1080としています。&lt;/p&gt;
&lt;p&gt;&amp;quot;monitor-DVI-D-1&amp;quot;、&amp;quot;monitor-VGA-1&amp;quot;のあたりがポイントで、出力したいデバイスにMonitorセクションの設定を割り当てます。&lt;/p&gt;
&lt;p&gt;デバイスの定義名はxrandr -q の出力を参考に。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;$ xrandr -q | grep &amp;quot;connected&amp;quot;
DVI-D-1 connected 1920x1080+0+0 (normal left inverted right x axis y axis) 531mm x 299mm
VGA-1 connected 1920x1080+1920+0 (normal left inverted right x axis y axis) 476mm x 268mm
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;以上で設定はおしまい。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2&gt;参考&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="http://en.gentoo-wiki.com/wiki/X.Org/Dual_Monitors"&gt;X.Org/Dual Monitors - Gentoo Linux Wiki&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
</summary><category term="Debian"></category></entry><entry><title>WordPressへ移行</title><link href="http://blog.tekito.org/2010/11/15/wordpress%E3%81%B8%E7%A7%BB%E8%A1%8C/" rel="alternate"></link><updated>2010-11-15T23:52:00+09:00</updated><author><name>Yusaku</name></author><id>tag:blog.tekito.org,2010-11-15:2010/11/15/wordpressへ移行/</id><summary type="html">&lt;p&gt;blogger.comからWordPressに移行しました。&lt;/p&gt;
&lt;p&gt;bloggerで書いた記事のうちCZ-900のレビュー記事だけはお引越し。&lt;/p&gt;
</summary></entry><entry><title>ロジクール Illuminated Keyboard CZ-900 レビュー</title><link href="http://blog.tekito.org/2010/02/10/%E3%83%AD%E3%82%B8%E3%82%AF%E3%83%BC%E3%83%AB-illuminated-keyboard-cz-900-%E3%83%AC%E3%83%93%E3%83%A5%E3%83%BC/" rel="alternate"></link><updated>2010-02-10T21:53:00+09:00</updated><author><name>Yusaku</name></author><id>tag:blog.tekito.org,2010-02-10:2010/02/10/ロジクール-illuminated-keyboard-cz-900-レビュー/</id><summary type="html">&lt;p&gt;先日 &lt;a class="reference external" href="http://www.logitech.com/index.cfm/keyboards/keyboard/devices/4740&amp;amp;amp;cl=jp,ja"&gt;ロジクール Illuminated Keyboard CZ-900&lt;/a&gt; 購入し、使用しはじめてそろそろ一ヶ月経つので、ここらでレビュー。&lt;/p&gt;
&lt;p&gt;CZ-900はデザインに凝ったキーボードでもありますが、デザインは好みや利用する場面にも左右されると思うので、この記事では主に &lt;em&gt;利便性や機能的な面&lt;/em&gt; に着目して書きました。「デザインは気に入ったけど...」って方はぜひ参考にしていただけると幸い。&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.logitech.com/index.cfm/keyboards/keyboard/devices/4740&amp;amp;amp;cl=jp,ja"&gt;ロジクール Illuminated Keyboard CZ-900&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;定価1万円。実勢価格7〜9千円。&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2&gt;キー配列&lt;/h2&gt;
&lt;p&gt;キーピッチ19mmの日本語配列フルキーボード。ただしかな印字はないので、かな入力者は対象とされていないようだ。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Deleteキーが大きく設計されている&lt;/em&gt; のが特徴的で、文章作成時には押しやすくて非常によい。Enterキーが細く設計されていることも相まって、小指で簡単に押しにいける。ただし、利用するソフトウェアによってはInsert/Deleteキーに対となる機能を振り分けるキーバインドがあるため、その場合においては逆に使いづらくなるのではないかと思う。&lt;/p&gt;
&lt;p&gt;Deleteキーは大きくてよいのだが、 &lt;em&gt;半角/全角キーと￥キーは細く設計されている点&lt;/em&gt; が気になる。どちらのキーもそれなりにタッチする機会があるキーなので、ときおりここでタイプミスが生じた。これらのキーが細くなってしまったのは、Enterキーを細く設計した弊害なのだろうか。&lt;/p&gt;
&lt;p&gt;F1〜F12キーにはFnキーとの絡みでホットキーが割り当てられている。このあたりをカスタマイズするとゲーム用途で活躍しそう。もちろんそれ以外の用途でも、あるに越したことはない。しかし、これら &lt;em&gt;最上段のキーは小さく(縦が短い)、やや押しづらい&lt;/em&gt; という難点がある。スペース的に余裕があるのだから、もう少し大きくてもよかったと思う。&lt;/p&gt;
&lt;p&gt;配列の最下段のキートップは膨らんだ曲線形をしている。これはCtrlキーやAltキーと他のキーを同時押しする際に、距離を稼げるように設計されているかな？...僕にはキートップが膨らんでいることの恩恵はあまり感じられなかった。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h2&gt;外観&lt;/h2&gt;
&lt;p&gt;パームレストはゴム素材でできており、感触は非常に良く、落ち着く。ゴム自体はペラペラなので押すと若干たわむが、キーボード使用中には特に気にならない。パームレスト部分は取り外しができないため、汚れると厄介かも。&lt;/p&gt;
&lt;p&gt;キーボード底にはスタンドがついているが、このスタンドの作りが若干脆く、キーボードの上から強い衝撃を受けるとポキッと折れてしまいそう。&lt;/p&gt;
&lt;p&gt;接続は無線ではなく、USBケーブルによって行う。ケーブルは右上からの片出し。ケーブル自体は一般的なキーボードのケーブルよりも細く、やや不安に感じた。ただ、キーボードのケーブルには負担が掛かることも少ないので、これでも充分といえば充分なのかもしれない。キーボードにはUSB接続用の端子はない。&lt;/p&gt;
&lt;p&gt;CapsLock/NumLock/ScrollLockの表示に癖があり、それぞれオンにするとテンキーの下方にマークが点灯される。デザインは素敵だが、慣れるまで若干わかりづらい。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id4"&gt;
&lt;h2&gt;イルミネーション機能&lt;/h2&gt;
&lt;p&gt;このキーボードが他のキーボードと一線を画す機能がイルミネーション機能。キーの下にバックライトが搭載されており、特殊な印字加工をされたキートップが透けて光る仕組みになっている。これにより、 &lt;em&gt;暗い部屋での利用も可能&lt;/em&gt; となっている。僕はイルミネーション機能を目的として買ったのではないけれど、実際使ってみると、とても上品に光り好印象。カッコイイ。&lt;/p&gt;
&lt;p&gt;イルミネーション機能による利便性について、最も気になった点はF1〜F12キー、PrintScreenキー、Pause/Breakキーにおいては &lt;em&gt;ホットキー表示のみしか点灯しない&lt;/em&gt; こと。暗い部屋で使った場合、F1〜F12キーはキーの並びからなんとなく把握できるが、PrintScreenキーは位置がわからなくなりそう。&lt;/p&gt;
&lt;p&gt;イルミネーション機能の不具合として、キーボードの接続形態や接続先マザーボードによっては、 &lt;em&gt;PCの電源を落としても点灯状態が継続されたまま&lt;/em&gt; になってしまう現象が起こる。これはキーボードからの入力でPCを立ち上げる機能をマザーボードがサポートしている場合などに起こり、 &lt;em&gt;常にUSB給電されてしまっていることが原因&lt;/em&gt; である。僕の場合はCPU切替器を介して接続すると、点灯したままになってしまった。その場合にはPCの電源OFFでもキー入力は受け付けているので(それが原因だからだ)、点灯調節キーで消灯状態にはできる。この現象は利用するマザーボードのBIOSの設定次第で解決できる可能性はある。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id5"&gt;
&lt;h2&gt;打鍵感&lt;/h2&gt;
&lt;p&gt;キーボードのキーにはパンタグラフ式スイッチが採用されている。&lt;/p&gt;
&lt;p&gt;一般的なパンタグラフ式キーボードのキーストロークは2.4〜2.8mm程度であることに対し、CZ-900は &lt;em&gt;キーストロークが3.2mm&lt;/em&gt; と深く設計されており、このお陰で他のパンタグラフ式キーボードと較べ、打鍵感はしっかりしている。&lt;/p&gt;
&lt;p&gt;キーは &lt;em&gt;押下圧55g&lt;/em&gt; と若干重く、反発が強い。キーに圧力を加えていくと、一定の圧力を加えるまではびくともせず、それを越えたときにスッと沈み込み、柔らかい底打ち感が残る。それと同時にキーからの大きな反発を受け、すぐに次のキーをタッチしにいけるところがよい。僕はこの打鍵感が非常に気に入った。&lt;/p&gt;
&lt;p&gt;先述した理由から、パンタグラフ式キーボードで頻発しがちな、隣接キーの誤爆をすることがほとんどない。&lt;/p&gt;
&lt;p&gt;僕は &lt;a class="reference external" href="http://www.diatec.co.jp/products/det.php?prod_c=588"&gt;Realforce 91UDK-G&lt;/a&gt; からの移行であったが、CZ-900の打鍵感は静電式スイッチを採用したRealforce 91UDK-Gのそれと較べても非常によく、高速にタッチすることができる。事実、タイピングゲームで測定してみたところ、Realforce 91UDK-G使用時に較べ20〜30keys/minほどタイピング速度が向上した。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id6"&gt;
&lt;h2&gt;まとめ&lt;/h2&gt;
&lt;p&gt;変態配列が溢れかえるパンタグラフ式キーボード界の優等生といった印象。やや癖はあるものの、概ね一般的なキー配列を持っている点と、キーの打鍵感がパンタグラフ式スイッチの良い部分を上手く残しつつ、弱点を克服できている点がとてもよい。&lt;/p&gt;
&lt;p&gt;どうしてもこのキーボードのウリであるイルミネーション機能に目がいってしまうが、イルミネーション機能を度外視したとしても、充分に価格相応の価値があるキーボードであると僕は思った。&lt;/p&gt;
&lt;p&gt;でもやっぱり &lt;em&gt;テンキーは不要&lt;/em&gt; に感じた。テンキーレス版があればなおよし...。&lt;/p&gt;
&lt;/div&gt;
</summary></entry><entry><title>ロジクール Illuminated Keyboard CZ-900購入</title><link href="http://blog.tekito.org/2010/01/14/%E3%83%AD%E3%82%B8%E3%82%AF%E3%83%BC%E3%83%AB-illuminated-keyboard-cz-900%E8%B3%BC%E5%85%A5/" rel="alternate"></link><updated>2010-01-14T21:26:00+09:00</updated><author><name>Yusaku</name></author><id>tag:blog.tekito.org,2010-01-14:2010/01/14/ロジクール-illuminated-keyboard-cz-900購入/</id><summary type="html">&lt;p&gt;近頃ノートパソコンのキーボードに触れる機会が度々あり、その都度キーボードが気になっていた。というのも、いままで自宅では1年ほど前に購入した &lt;a class="reference external" href="http://www.diatec.co.jp/products/det.php?prod_c=588"&gt;Realforce 91UDK-G (東プレ)&lt;/a&gt; を使っていたのだが、僕にはどうもノートのキーボードの方が打ちやすく感じた。&lt;/p&gt;
&lt;p&gt;Realforceシリーズは静電式スイッチ、ノートはパンタグラフ式スイッチ。同じキーボードとは言え、叩くと全く違ったもの。世間では静電式スイッチの製品が割と持てはやされていて、僕もそれに多少影響されてRealforce 91UDK-Gの購入に踏みきったのだけれど(もちろん実際に触ってみてよいと感じた)、先述した体験から次第にパンタグラフ式スイッチのキーボードへの感心が強まり、ひとつ買ってみることにした。&lt;/p&gt;
&lt;p&gt;最近僕はネットのレビューを参考にしてその場(ネット)で買い物をすることも多いけれど、キーボードをネットのレビューのみを鵜呑みにして買うコトには少々不安感を覚えたので、実際にパンタグラフ式のキーボードを叩きにアキバへ行って買うことにした。&lt;/p&gt;
&lt;p&gt;事前にネットでリサーチして、購入候補として挙がっていたのは以下の2製品。&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.scythe.co.jp/input-device/stream-xt.html"&gt;G85-23100JAADSF (Cherry)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.sigma-apo.co.jp/front/products/detail/EIPH108"&gt;EIPH108 (シグマA・P・O)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;実を言うとテンキーレスのキーボードが欲しかったのだけれど、パンタグラフ式でテンキーレスの製品となると、ほとんど(現状全て?)がコンパクトキーボードとなってしまうようで、テンキーレスは断念した。&lt;/p&gt;
&lt;p&gt;ではなぜこの2製品に絞ったかというと、&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;今使っているRealforce 91UDK-Gの配列に近い(重要)&lt;/li&gt;
&lt;li&gt;接続形態が無線ではない&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;というかなり消極的な理由から。Realforce 91UDK-Gの無駄のないスッキリとしたデザインが気に入っていたので、変態配列のもの(パンタグラフ式キーボードには特に多く感じる)は避けた。僕の理想としてはRealforce 91UDK-Gをパンタグラフ仕様にしてもらえれば、それが一番だと思っている。&lt;/p&gt;
&lt;p&gt;実際アキバに行って上記の2製品を中心に、様々なキーボードを叩いてみた所感としては、G85-23100JAADSFはキーストロークが非常に浅く、キータッチも柔らかいので、パンタグラフで頻発しがちな隣接キーの誤爆がチョット心配になった。それに対してEIPH108はキーストロークもそこそこあり、キータッチもしっかりしている。加えて赤色モデルの色がネットの写真でみたのよりも落ち着いた色合いで、好印象。&lt;/p&gt;
&lt;p&gt;もうEIPH108にしてしまおうかと、いろんなお店での価格チェックをしながらキーボードを叩いて回っていたところ、 &lt;a class="reference external" href="http://www.logicool.co.jp/index.cfm/keyboards/keyboard/devices/4740&amp;amp;amp;cl=jp,ja"&gt;ロジクール CZ-900&lt;/a&gt; の叩き心地のよさに目(手?)を奪われた。&lt;/p&gt;
&lt;p&gt;CZ-900のキータッチはEIPH108を更にしっかりさせた感じで、パンタグラフ式キーボードではかなり固い部類にはいるのではないかと思う。ストロークもパンタグラフ式のキーボードとしては深め。そして何よりも気に入ったポイントが、キーを押下したときの反発が強いこと。反発が強いお陰ですぐに次のキーをタッチしにいけるのがよい。この叩き心地はメカニカル式スイッチに似た心地よさがある。&lt;/p&gt;
&lt;p&gt;ロジクールの製品は完全にノーマークだったので、嬉しい誤算。当初予定していた金額よりもだいぶ出費が増えてしまうが、CZ-900を買うことにした。
まだ使いはじめて数時間だけれど、購入後に気づいた点もあるので、そちらについてはまた後日レビューとしてまとめようと思う。&lt;/p&gt;
&lt;p&gt;また、CZ-900の他に&amp;quot;クレバリー製オリジナルキーボード&amp;quot;の叩き心地もよかった。やや壊れやすそうな印象が気になったが、こちらは2000円程度だったので、コストパフォーマンスは高そう。&lt;/p&gt;
</summary></entry></feed>